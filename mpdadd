#!/usr/bin/env ruby

# Standart ruby library, no extra packages required
require "fileutils"
require "ostruct"
require "optparse"
require "json"

begin
        require "librmpd" # avaible in gems and in AUR in Archlinux
rescue LoadError
        $stderr.puts "Please install librmpd to use this tool!"
        exit 1
end

class OpenStruct
        def to_json(*a)
                marshal_dump.to_json(*a)
        end
        def load(file)
                if File.exists? file then
                        begin
                                f = File.open(file, 'r')
                                marshal_load(JSON.load(f).map do |k, v|
                                        return k.to_sym, v
                                end)
                                f.close
                        rescue
                                puts "Can't read config file: #$!"
                        end
                end
        end

        def save(file)
                f = File.new(file, 'w')
                JSON.dump self, f
                f.close
        end
end

class Mpdadd < MPD
        CONFIG = File.expand_path "~/.mpdadd"

	def mpd_path_valid?
		if !File.exist? @mpd_path
			warn "Given music directory '#{@mpd_path}' does not exist"
			return false
		elsif !File.exist? @mpd_link_path
			print "Given link directory '#{@mpd_link_path}' doesn't exists, create it? y or n?";
			yes = (STDIN.gets =~ /^y.*/i)
			if yes then
				begin
					FileUtils.mkpath @mpd_link_path
				rescue
					warn "Can't create #$!."
					return false
				end
			end
		elsif !File.writable? @mpd_link_path
			warn "Can't create links: '#{@mpd_link_path}' is not writable"
			return false
		end
		return true
	end

	def try_connect
                begin
                        puts "Try to connect to MPD" if @opts.verbose
			connect
		rescue
			warn "Can't connect to MPD: #{@opts.host}:#{@opts.port}"
			return false
		end
	end

	def parse_args(args)
                files = []
                save_config = false
                # Default options
                options = OpenStruct.new
                # Domain name or IP adress of the server. If you add a remote server,
                # the linked files must be readable by the server.
                options.host     = "localhost"
                # Port where MPD is listen to. Default: 6600
                options.port     = 6600
                # Optional, This field will be ignored, if set to nil
                options.password = nil
                # The top directory specified in /etc/mpd.conf
                options.library  = "~/music"
                # The basename of the directory where the symbolic are stored.
                # Should be writeable by the user, who start this script.
                options.link_dir = "links"
                options.play     = false
                options.use_gui  = false

                options.verbose  = false
                options.load(CONFIG)

                parser = OptionParser.new do |opts|
                        opts.banner = "Usage: #{File.basename $0} [options] files..."
                        opts.separator "Add songs from outside of your mpd library to your playlist"
                        opts.separator ""
                        opts.separator "Specific options:"
                        opts.on("-h", "--host", "the host to connect to [default: localhost]") do |h|
                                options.host = h
                        end
                        opts.on("-p", "--port", "the port to connect to [default: 6600]") do |p|
                                options.port = p
                        end
                        opts.on("-g", "--gui", "Use a gui file dialog (requires ruby-gtk) [default: off]") do |l|
                                options.use_gui = true
                        end
                        opts.on("-l", "--library [DIRECTORY]", "Play the first file added immediately [default: ~/music]") do |l|
                                options.library = l
                        end
                        opts.on("-p", "--play", "Play the first file added immediately [default: off]") do
                                options.play = true
                        end
                        opts.on("-s", "--save", "Save current options to file '~/.mpdadd'") do
                                save_config = true
                        end
                        opts.on("-h", "--help", "Show this help.") do
                                puts opts
                                exit
                        end
                        opts.on("-v", "--[no-]verbose", "Logging verbosely [default: off]") do |v|
                                options.verbose = v
                        end
                end

                parser.parse!(args)

                if save_config
                        puts "Save config" if options.verbose
                        options.save(CONFIG)
                end
                args.each do |file|
                        if !File.exist? file
                                puts "File #{file} does not exist!"
                                next
                        else
                                files << file
                        end
                end
                if options.use_gui
                        require 'gtk2'
                        dialog = Gtk::FileChooserDialog.new("Choose File to add it to mpd playlist.",
                                                            nil,
                                                            Gtk::FileChooser::ACTION_OPEN,
                                                            nil,
                                                            [Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_CANCEL],
                                                            [Gtk::Stock::OPEN, Gtk::Dialog::RESPONSE_ACCEPT])
                        dialog.set_select_multiple(true)
                        if dialog.run == Gtk::Dialog::RESPONSE_ACCEPT
                                files = files.concat(dialog.filenames)
                        end
                        dialog.destroy
                end
                return options, files
	end

	def add_files(files)
		files.each do |file|
			path = File.expand_path file
			relativ_path = ""

			puts "Enqueing: #{File.basename(file)}" if opts.verbose
			# if the given path is within music dir just add it
			if path.index(@mpd_path) == 0
				puts "File is already in music directory!" if opts.verbose
				relativ_path = path[@mpd_path.length+1, path.length]
			else  # else link and force MPD update
				escaped_path = escape_path path
				link_path = File.join(@mpd_link_path, escaped_path)

				if !File.exist?(link_path) or (File.readlink link_path) == file
					puts 'Force simbolic link!' if opts.verbose
					FileUtils.ln_sf path, link_path
				elsif opts.verbose
					puts 'Link already exists!'
				end

				relativ_path = File.join(@opts.link_dir, escaped_path)
			end

                        puts 'Update MPD\'s Database' if opts.verbose
                        update relativ_path
                        puts "Add '#{relativ_path}' to Playlist" if opts.verbose
                        add relativ_path
		end
	end
        # replace directory delimiter with !
	def escape_path(path)
		# EXPERIMENTAL Help me to test this on windows
		if RUBY_PLATFORM =~ /(win|w)32$/
			return path.gsub("\\", "!")
		else
			return path.gsub("/", "!")
		end
	end

	def initialize
                @opts, files = parse_args(ARGV)
                if files.empty? then
                        exit 0
                end
                @mpd_path = File.expand_path(@opts.library)
                @mpd_link_path = File.join(@mpd_path, @opts.link_dir)

		super(@opts.host, @opts.port)
		exit 1 unless mpd_path_valid? and try_connect

		password(@opts.password) if @opts.password != nil
		nextsong = status["playlistlength"].to_i

		add_files files

		if @opts.play
			puts "Playing..." if @opts.verbose
			play nextsong
		end

		puts "Finished successful!" if @opts.verbose
		exit 0
	end

        attr_accessor :opts, :mpd_path, :mpd_link_path
end

Mpdadd.new
